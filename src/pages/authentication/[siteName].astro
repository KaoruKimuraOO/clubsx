---
/**
 * This page is for when the user clicks from the Firebase email authentication link
 */

import Layout from '@layouts/Landing.astro'

const { site } = Astro.params
---

<Layout>
  <section class="mb-16 mt-8 text-center">
    <h1 class="mb-2 text-center font-title text-7xl font-bold">
      Connecting Your Account
    </h1>
    <span>Authenticating...</span>
  </section>
  <input id="siteName" type="hidden" value={site} disabled />
</Layout>

<script>
  import {
    getAdditionalUserInfo,
    isSignInWithEmailLink,
    signInWithEmailLink,
  } from 'firebase/auth'
  import { initializeFirebase } from '../../fixtures/firebase'
  import { ClubsConfiguration, setConfig } from '@devprotocol/clubs-core'

  import { defaultConfig } from '@constants/defaultConfig'

  // Confirm the link is a sign-in with email link.
  const auth = initializeFirebase()
  const siteName = JSON.parse(
    (document.getElementById('siteName') as HTMLInputElement)?.value
  ) as string

  if (isSignInWithEmailLink(auth, window.location.href)) {
    let email = window.localStorage.getItem('emailForSignIn')
    if (!email) {
      // User opened the link on a different device. To prevent session fixation
      // attacks, ask the user to provide the associated email again. For example:
      email = window.prompt('Please provide your email for confirmation')
    }

    signInWithEmailLink(auth, email ?? '', window.location.href).then(
      async (result) => {
        // Clear email from storage.
        window.localStorage.removeItem('emailForSignIn')

        const details = getAdditionalUserInfo(result)
        const jwtToken = await result.user.getIdToken()
        const site: string | undefined =
          window.location.pathname.split('/').pop() || siteName
        const uid = result.user.uid

        // If it is a new user, set the __draft user
        if (details?.isNewUser && uid) {
          // Make the default config.
          const config: ClubsConfiguration = {
            ...defaultConfig,
            name: site,
            options: [
              ...(defaultConfig.options ? defaultConfig.options : []),
              {
                key: '__draft',
                value: {
                  isInDraft: true,
                  uid: uid,
                },
              },
            ],
          }

          const body = {
            site,
            config,
            uid,
          }

          // Save the config to db.
          const res = await fetch('/api/addDaoToDraft', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Authorization: `Bearer ${jwtToken}`,
            },
            body: JSON.stringify(body),
          })

          if (res.ok) {
            setConfig(config)
          }
        }

        // TODO: navigate to setup here.
        // window.location.href = '/setup/homepage'
      }
    )
  }
</script>
