---
import AdminMembershipsAdditionForm from '@components/AdminMembershipsForm/AdminMembershipsAdditionForm.svelte'
import { config as _config } from '@fixtures/config'
import { adminFactory } from '@devprotocol/clubs-core'
import memberships from '@plugins/memberships'
import SetupLayout from '@layouts/Setup.astro'
import { Membership } from '@constants/membership'

const { site, preset } = Astro.params

const { getStaticPaths, getCurrentConfig } = adminFactory({
  config: async () => await _config(site),
  plugins: {
    memberships,
  },
})

const config = await getCurrentConfig()
const path = (await getStaticPaths()).find(
  ({ params }) => params.page === `memberships`
)

if (!path) {
  throw new Error('Path undefined: ', path)
}

const { props } = path

const presets = (props.presets ?? []) as Membership[]

const membership = presets.find(
  (_membership: Membership) => _membership.id === preset
)

if (!membership) {
  throw new Error(`Membership not found: ${preset}`)
}
---

<SetupLayout {config} {...props} setupStep="MEMBERSHIPS">
  <section class="grid gap-16">
    <h1 class="font-title text-lg font-bold">Memberships</h1>

    <AdminMembershipsAdditionForm
      client:load
      currentPluginIndex={props.clubs.currentPluginIndex}
      membership={membership}
      presets={props.presets as Membership[]}
      existingMemberships={props.memberships as Membership[]}
      rpcUrl={props.rpcUrl as string}
      base="/setup"
    />
  </section>
</SetupLayout>

<script>
  import { ClubsEvents } from '@devprotocol/clubs-core'
  import { Membership } from '@constants/membership'

  import { GetModalProvider, ReConnectWallet } from '@fixtures/wallet'

  import { keccak256, parseUnits } from 'ethers/lib/utils'

  import BigNumber from 'bignumber.js'

  import { constants } from 'ethers'

  import { callSimpleCollections } from '@plugins/memberships/utils/simpleCollections'

  document.body.addEventListener(ClubsEvents.FinishConfiguration, (ev) => {
    document.body.addEventListener(
      ClubsEvents.FinishConfiguration,
      async (ev) => {
        const memOptsInput = document.getElementById(
          'membershipOpts'
        ) as HTMLInputElement
        const memOpts = JSON.parse(memOptsInput.value) as Membership[]

        const propertyAddressInput = document.getElementById(
          'propertyAddress'
        ) as HTMLInputElement
        const propAddress = propertyAddressInput.value as string

        const modalProvider = GetModalProvider()
        const { currentAddress, provider } = await ReConnectWallet(
          modalProvider
        )
        if (!currentAddress || !provider) {
          return
        }

        const images = memOpts.map((opt) => ({
          src: opt.imageSrc,
          requiredETHAmount: parseUnits(String(opt.price)).toString(),
          requiredETHFee: opt.fee?.percentage
            ? parseUnits(
                new BigNumber(opt.price).times(opt.fee.percentage).toFixed()
              ).toString()
            : 0,
          gateway: opt.fee?.beneficiary ?? constants.AddressZero,
        }))

        const keys: string[] =
          memOpts?.map((opt) => keccak256(opt.payload)) || []

        await callSimpleCollections(provider, 'setImages', [
          propAddress,
          images,
          keys,
        ])

        window.location.href = '/setup/memberships?created'
      }
    )
  })
</script>
