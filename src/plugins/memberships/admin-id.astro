---
import AdminMembershipsAdditionForm from '@components/AdminMembershipsForm/AdminMembershipsAdditionForm.svelte'
import { ClubsPropsAdminPages } from '@devprotocol/clubs-core'
import { Membership } from '.'

const { membership, memberships, clubs, rpcUrl, propertyAddress } =
  Astro.props as ClubsPropsAdminPages & {
    membership: Membership
    memberships: Membership[]
    rpcUrl: string
    propertyAddress: string
  }
---

<div>
  <h1 class="mb-8 font-title text-lg font-bold">Memberships</h1>

  <AdminMembershipsAdditionForm
    client:load
    currentPluginIndex={clubs.currentPluginIndex}
    membership={membership as Membership}
    existingMemberships={memberships as Membership[]}
    mode="edit"
    rpcUrl={rpcUrl}
    propertyAddress={propertyAddress}
  />

  <input
    id="membershipOpts"
    type="hidden"
    value={JSON.stringify(memberships)}
  />
  <input id="propertyAddress" type="hidden" value={propertyAddress} />
</div>

<script>
  import { ClubsEvents } from '@devprotocol/clubs-core'
  import { GetModalProvider, ReConnectWallet } from '@fixtures/wallet'
  import { constants } from 'ethers'
  import { keccak256, parseUnits } from 'ethers/lib/utils'
  import BigNumber from 'bignumber.js'

  import { Membership } from '.'

  import { callSimpleCollections } from './utils/simpleCollections'

  document.body.addEventListener(
    ClubsEvents.FinishConfiguration,
    async (ev) => {
      const memOptsInput = document.getElementById(
        'membershipOpts'
      ) as HTMLInputElement
      const memOpts = JSON.parse(memOptsInput.value) as Membership[]

      const propertyAddressInput = document.getElementById(
        'propertyAddress'
      ) as HTMLInputElement
      const propAddress = propertyAddressInput.value as string

      const modalProvider = GetModalProvider()
      const { currentAddress, provider } = await ReConnectWallet(modalProvider)
      if (!currentAddress || !provider) {
        return
      }

      const images = memOpts.map((opt) => ({
        src: opt.imageSrc,
        requiredETHAmount: parseUnits(String(opt.price)).toString(),
        requiredETHFee: opt.fee?.percentage
          ? parseUnits(
              new BigNumber(opt.price).times(opt.fee.percentage).toFixed()
            ).toString()
          : 0,
        gateway: opt.fee?.beneficiary ?? constants.AddressZero,
      }))

      const keys: string[] = memOpts?.map((opt) => keccak256(opt.payload)) || []

      await callSimpleCollections(provider, 'setImages', [
        propAddress,
        images,
        keys,
      ])
    }
  )
</script>
