---
import AdminMembershipsForm from '@components/AdminMembershipsForm/AdminMembershipsForm.svelte'
import { ClubsPropsAdminPages, decode } from '@devprotocol/clubs-core'
import { Membership } from '.'

const { memberships, presets, clubs, rpcUrl } =
  Astro.props as ClubsPropsAdminPages & {
    memberships: Membership[]
    presets: Membership[]
    rpcUrl: string
  }

const decoded = decode(clubs.encodedClubsConfiguration)
const propertyAddress = decoded.propertyAddress
---

<div>
  <h1 class="mb-16 font-title text-lg font-bold">Membership</h1>

  <AdminMembershipsForm
    client:only="svelte"
    currentPluginIndex={clubs.currentPluginIndex}
    memberships={memberships}
    presets={presets}
    propertyAddress={propertyAddress}
    rpcUrl={rpcUrl}
  />
</div>

<input id="membershipOpts" type="hidden" value={JSON.stringify(memberships)} />
<input id="propertyAddress" type="hidden" value={propertyAddress} />

<script>
  import { ClubsEvents } from '@devprotocol/clubs-core'
  import { GetModalProvider, ReConnectWallet } from '@fixtures/wallet'
  import { Membership } from '@plugins/memberships'
  import { BigNumber } from 'ethers'
  import { keccak256, parseUnits } from 'ethers/lib/utils'

  import { callSimpleCollections } from './utils/simpleCollections'

  document.body.addEventListener(
    ClubsEvents.FinishConfiguration,
    async (ev) => {
      const memOptsInput = document.getElementById(
        'membershipOpts'
      ) as HTMLInputElement
      const memOpts = JSON.parse(memOptsInput.value) as Membership[]

      const propertyAddressInput = document.getElementById(
        'propertyAddress'
      ) as HTMLInputElement
      const propAddress = propertyAddressInput.value as string

      const modalProvider = GetModalProvider()
      const { currentAddress, provider } = await ReConnectWallet(modalProvider)
      if (!currentAddress || !provider) {
        return
      }

      const images = memOpts.map((opt) => ({
        src: opt.imageSrc,
        requiredETHAmount: parseUnits(String(opt.price)).toString(),
        requiredETHFee: opt.fee?.percentage
          ? parseUnits(
              BigNumber.from(opt.price).mul(opt.fee.percentage).toString()
            ).toString()
          : 0,
        gateway: currentAddress,
      }))

      const keys: string[] = memOpts?.map((opt) => keccak256(opt.payload)) || []

      await callSimpleCollections(provider, 'setImages', [
        propAddress,
        images,
        keys,
      ])
    }
  )
</script>
